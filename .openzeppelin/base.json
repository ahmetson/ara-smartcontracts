{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x8fAd4d86b6cc14798882B607cD62fbdc3b5a258c",
      "txHash": "0x9558b4e6d133931cd2609f14d7a1ca884f4bfa4c09efe6591ab9a17d056f326a",
      "kind": "transparent"
    },
    {
      "address": "0xE20A78EFA6A6f14CE1229f2CF34082ABb78e92Fd",
      "txHash": "0xa1fb5b62593fc395777ff97b117033cf048d93d586b6041466790b3d3417b173",
      "kind": "transparent"
    },
    {
      "address": "0x727E72ad13910680378d3E5E4AaA188944da867B",
      "txHash": "0x32696d8498015e3ef4c8c8438da102219cc493d311cf7fbe40d34b72d4c9b0c2",
      "kind": "transparent"
    },
    {
      "address": "0xdCF8f610f631eE582dB547066392B2675DF71E7e",
      "txHash": "0xf2662ce2c52223a4bc1ac36b21793878db23e9305729b70a60d91664b35f3bd1",
      "kind": "transparent"
    },
    {
      "address": "0x72Ed11B14C69D6C9faE5544dE44e2f9E27D1f81C",
      "txHash": "0xd144f826bcb808672b979da00729845def1e9bcc78f4c90e30659823873a7f42",
      "kind": "transparent"
    },
    {
      "address": "0xD38359e85a064EDF54D4Bc017c92Af2AcDa194Fa",
      "txHash": "0x8de012e92f3b50f677058440993894cd2f3178eeca11c546a284c9243f3a4e98",
      "kind": "transparent"
    }
  ],
  "impls": {
    "bbd0dde6f80b4c1852fa5d1fc140ddf60a90686e4fb4c802e6d7b7499b8df123": {
      "address": "0x8025Bf54c3b1449648055aB4428254713dD9922D",
      "txHash": "0x96e1f4a9ffc2ef5ea34b83f0ddcc8b9574a65cc54e512df33aa5165d5cf4af54",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)35_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20CappedStorage)253_storage": {
            "label": "struct ERC20CappedUpgradeable.ERC20CappedStorage",
            "members": [
              {
                "label": "_cap",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)176_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)95_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20Capped": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC20CappedUpgradeable.sol:15",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "af0233ef60ab6667b090433701b25709e3a8619318731cc44a63fbd58cbd46f2": {
      "address": "0x2ddb8522230A7C6b59b6EF185163fd33B5C634bb",
      "txHash": "0x97984866ba9ed35cec4c8bd2835f7b68081a52499c60741e2838f1aa7fea3a80",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "ara",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2132",
            "contract": "MAINToken",
            "src": "contracts\\MAINToken.sol:19"
          },
          {
            "label": "sessionId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MAINToken",
            "src": "contracts\\MAINToken.sol:31"
          },
          {
            "label": "receivershipId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "MAINToken",
            "src": "contracts\\MAINToken.sol:32"
          },
          {
            "label": "leader",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "MAINToken",
            "src": "contracts\\MAINToken.sol:33"
          },
          {
            "label": "revokes",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Revoke)3185_storage)",
            "contract": "MAINToken",
            "src": "contracts\\MAINToken.sol:35"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)244_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)163_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(IERC20)2132": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Revoke)3185_storage)": {
            "label": "mapping(uint256 => struct MAINToken.Revoke)",
            "numberOfBytes": "32"
          },
          "t_struct(Revoke)3185_storage": {
            "label": "struct MAINToken.Revoke",
            "members": [
              {
                "label": "from",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "to",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "timeStart",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "actionTaken",
                "type": "t_bool",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "countYes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "countNo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "voted",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "3582503aff5e565c7945887829cc98a703f903a90c7a7276e6e7a62a77ab59d5": {
      "address": "0x1D6FB66baDffd4EBD60df83178F8BD34c7CEbeca",
      "txHash": "0x9158575aec790e00943eacc16c0421b80190e355e0b2e6243cfb0da0426c0bd4",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "noBridgeEndTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:54"
          },
          {
            "label": "bridge",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:55"
          },
          {
            "label": "araToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:56"
          },
          {
            "label": "checkToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:57"
          },
          {
            "label": "mainToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:58"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:59"
          },
          {
            "label": "vestingContracts",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)8_storage",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:60"
          },
          {
            "label": "bridgeVoting",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(BridgeVoting)3948_storage",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:61"
          },
          {
            "label": "collaterals",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_struct(Collateral)3922_storage)",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:63"
          },
          {
            "label": "rounds",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint8,t_struct(Round)3933_storage)",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:64"
          },
          {
            "label": "vestings",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint8,t_address)",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:65"
          },
          {
            "label": "collateralVotings",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_struct(CollateralVoting)3964_storage)",
            "contract": "Minter",
            "src": "contracts\\Minter.sol:66"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)163_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)112_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)382_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_address)8_storage": {
            "label": "address[8]",
            "numberOfBytes": "256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Collateral)3922_storage)": {
            "label": "mapping(address => struct Minter.Collateral)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(CollateralVoting)3964_storage)": {
            "label": "mapping(address => struct Minter.CollateralVoting)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_address)": {
            "label": "mapping(uint8 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_struct(Round)3933_storage)": {
            "label": "mapping(uint8 => struct Minter.Round)",
            "numberOfBytes": "32"
          },
          "t_struct(BridgeVoting)3948_storage": {
            "label": "struct Minter.BridgeVoting",
            "members": [
              {
                "label": "bridge",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timeStart",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "actionTaken",
                "type": "t_bool",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "countYes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "countNo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "voted",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(Collateral)3922_storage": {
            "label": "struct Minter.Collateral",
            "members": [
              {
                "label": "feedDecimals",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tokenDecimals",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "feedAddr",
                "type": "t_address",
                "offset": 2,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(CollateralVoting)3964_storage": {
            "label": "struct Minter.CollateralVoting",
            "members": [
              {
                "label": "params",
                "type": "t_struct(Collateral)3922_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timeStart",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "actionTaken",
                "type": "t_bool",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "countYes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "countNo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "voted",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(Round)3933_storage": {
            "label": "struct Minter.Round",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "pricePerToken",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "minted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "minUsd",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "maxUsd",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "4ab518640b91a572a93e253fb2bee2b8eaaf19aa137f4e3529903e5cca676c84": {
      "address": "0x36b2fC7dFde2FbfC3aa093E96677a98502829187",
      "txHash": "0x10e04cae53c8ef0b6b3d84f6a08ad5f73a790384bf1d202e9d669f72383b1401",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "ara",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2132",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:22"
          },
          {
            "label": "main",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2132",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:23"
          },
          {
            "label": "minter",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IMinter)3136",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:24"
          },
          {
            "label": "projectId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:44"
          },
          {
            "label": "projects",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Project)2295_storage)",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:46"
          },
          {
            "label": "newProjectVotings",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(NewProject)2282_storage)",
            "contract": "CHECKToken",
            "src": "contracts\\CHECKToken.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)244_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)163_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(IERC20)2132": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IMinter)3136": {
            "label": "contract IMinter",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NewProject)2282_storage)": {
            "label": "mapping(uint256 => struct CHECKToken.NewProject)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Project)2295_storage)": {
            "label": "mapping(uint256 => struct CHECKToken.Project)",
            "numberOfBytes": "32"
          },
          "t_struct(NewProject)2282_storage": {
            "label": "struct CHECKToken.NewProject",
            "members": [
              {
                "label": "params",
                "type": "t_struct(Project)2295_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "timeStart",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "actionTaken",
                "type": "t_bool",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "countYes",
                "type": "t_uint256",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "countNo",
                "type": "t_uint256",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "voted",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "10"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(Project)2295_storage": {
            "label": "struct CHECKToken.Project",
            "members": [
              {
                "label": "maintainer",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "period",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "startTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "minted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "cancelled",
                "type": "t_bool",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
